{"version":3,"sources":["services/CourseService.js","components/CourseRowComponent.js","components/CourseTableComponent.js","components/CourseGridComponent.js","containers/CourseListContainer.js","components/LessonTabsComponent.js","components/ModuleListComponent.js","components/CourseEditor.js","components/HomeComponent.js","components/SignInComponent.js","components/Whiteboard.js","App.js","serviceWorker.js","index.js"],"names":["course","fetch","method","body","JSON","stringify","headers","then","response","json","courseId","CourseRowComponent","state","edit","props","setEdit","setState","save","courseService","_id","status","updateCourseTitle","newTitle","prevState","title","className","this","key","to","onChange","event","target","value","owner","modified","onClick","deleteCourse","React","Component","CourseTableComponent","courses","length","map","CourseGridComponent","CourseListContainer","layout","match","params","newCourseTitle","setLayout","history","push","addCourse","newCourse","Date","toDateString","theActualNewCourse","courseToDelete","filter","actualArrayOfCourses","prevProp","snapshot","type","placeholder","LessonTabsComponent","ModuleListComponent","CourseEditor","HomeComponent","SignInComponent","Whiteboard","path","exact","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dbd96630.chunk.js","sourcesContent":["const createCourse = (course) => {\n    //first fetch, !! by default fetch is a GET request\n    return fetch(\"https://wbdv-generic-server.herokuapp.com/api/shinekim/courses\", {\n        //change the default GET request to POST request\n        method: \"POST\",\n        //embed data that we want to create inside of the body as a JSON file\n        body: JSON.stringify(course),\n        //how is this data encoded? what is the data type for this?\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    })\n        .then(response => response.json())\n};\n\n\nconst deleteCourse = (courseId) => {\n    return fetch(\"https://wbdv-generic-server.herokuapp.com/api/shinekim/courses/\" + courseId, {\n        method: \"DELETE\",\n    })\n        .then(response => response.json())\n};\n\nconst updateCourse = (courseId, course) => {\n    return fetch(\"https://wbdv-generic-server.herokuapp.com/api/shinekim/courses/\" + courseId, {\n        //change the default GET request to PUT request\n        method: \"PUT\",\n        body: JSON.stringify(course),\n        headers: {\n            \"content-type\": \"application/json\"\n        }\n    })\n        .then(response => response.json())\n};\n\n\nconst findCourseById = (courseId) => {};\n\nconst findAllCourses = () => {\n    //first we fetch the data from remote server\n    return fetch(\"https://wbdv-generic-server.herokuapp.com/api/shinekim/courses\")\n    //then we handle the response (convert to JSON)\n        .then(response => response.json())\n};\n\n\n//we can export individually or we can export as one big object\nexport default {\n    //\"createCourse\": createCourse,\n    //\"deleteCourse\": deleteCourse,\n    //\"findCourseById\": findCourseById,\n    //\"findAllCourses\": findAllCourses\n    createCourse,\n    deleteCourse,\n    findCourseById,\n    findAllCourses,\n    updateCourse\n}","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport courseService from \"../services/CourseService\";\n\nexport default class CourseRowComponent extends React.Component {\n    //the local state field will show whether an element is currently being \"edited\" or not\n    state = {\n        edit: false,\n\n        //this is our own copy of course\n        course: this.props.course\n    };\n\n    //function to set the local state editing to T/F\n    setEdit = (edit) =>\n        this.setState({edit: edit});\n\n\n    save = () => {\n        courseService.updateCourse(\n            this.state.course._id,\n            //our course should already have the new title\n            this.state.course)\n            //after status comes back as positive, we can set the setEdit to false\n            .then(status => this.setEdit(false))\n    };\n\n    updateCourseTitle = (newTitle) =>\n        this.setState(prevState => ({\n            course: {\n                ...prevState.course,\n                title: newTitle\n            }\n        }));\n\n    render() {\n        return (\n            //reminder: props are read only !!!\n        <tr className={this.state.edit ? \"table-secondary\": \"\"} key={this.props.course._id}>\n            <td>\n                {/*Making the title and input field mutually exclusive to each other\n                if the state is not in edit-mode, show title\n                if the state is in edit-mode, show input field*/}\n                {!this.state.edit &&\n                    // below code = \"/editor/\"+ this.state.course._id\n                    <Link to={`/editor/${this.state.course._id}`}>\n                        {this.state.course.title}\n                    </Link>\n                        }\n\n\n                {this.state.edit && <input\n                    className=\"form-control\"\n                    onChange={(event) => this.updateCourseTitle(event.target.value)}\n                    value={this.state.course.title}/>}\n            </td>\n\n            <td>{this.state.course.owner}</td>\n            <td>{this.state.course.modified}</td>\n            <td>\n                {!this.state.edit &&\n                <button\n                    className=\"btn btn-secondary\"\n                    onClick={() => this.setEdit(true)}>Edit</button>\n                }\n\n                {this.state.edit &&\n                <span>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={this.save}>Save</button>\n                    <button\n                        className=\"btn btn-danger\"\n                        onClick={() => this.props.deleteCourse(this.props.course)}>\n                        Delete\n                </button>\n                </span> }\n            </td>\n        </tr>\n        )\n    }\n}","import React from \"react\";\nimport CourseRowComponent from \"./CourseRowComponent\";\n\nexport default class CourseTableComponent extends React.Component {\n    render() {\n        return (\n\n            <div>\n                <h3>Course Table {this.props.courses.length}</h3>\n                <table className=\"table\">\n                    <thead>\n                    <tr>\n                        <th>Title</th>\n                        <th>Owner</th>\n                        <th>Last Modified</th>\n                        <th>\n                            <button className=\"btn btn-light\">Sort</button>\n                            <button className=\"btn btn-light\">Grid</button>\n                        </th>\n                    </tr>\n                    </thead>\n\n                    <tbody>\n                    {\n                        //we want to iterate over the array\n                        this.props.courses.map(course =>\n                            <CourseRowComponent\n                                deleteCourse={this.props.deleteCourse}\n                                key={course._id}\n                                course={course}/> )\n                    }\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}","import React from \"react\";\n\nexport default class CourseGridComponent extends React.Component {\n    render() {\n        return (\n        <h3>Course Grid {this.props.courses.length}</h3>);\n    }\n}","import React from \"react\";\nimport CourseTableComponent from \"../components/CourseTableComponent\";\nimport CourseGridComponent from \"../components/CourseGridComponent\";\nimport courseService from \"../services/CourseService\";\n\n//the course list is playing the role of a container\n\nclass CourseListContainer extends React.Component {\n    state = {\n        layout: this.props.match.params.layout,\n        //empty array, placeholder to replace with fetched data from server\n        courses: [],\n        newCourseTitle: \"\"\n    };\n\n    componentDidMount() {\n        //playing the role of the controller\n        courseService.findAllCourses()\n            //then we set the state\n            .then(actualArrayOfCourses => this.setState({courses: actualArrayOfCourses}))\n    };\n\n    //function that gets notified when any of the properties changes because of some outside information change\n    componentDidUpdate(prevProp, prevState, snapshot) {\n        if(prevProp.match.params.layout !== this.props.match.params.layout) {\n            this.setState({\n                layout:this.props.match.params.layout\n            })\n        }\n    };\n\n    //new syntax for ES6; this code is === to\n    //function setLayout() {}\n    setLayout = (layout) => {\n        //dont do: this.state.layout = layout;\n\n        //this.setState({\n        //    layout:layout\n        //})\n        //instead of changing the state, we want to change the URL\n\n        this.props.history.push(`/${layout}/courses`)\n    };\n\n    addCourse = (title) => {\n        const newCourse = {\n            //we dont need this anymore bc the service will create this for us\n            //_id: (new Date()).getMilliseconds() + \"\",\n            title: title,\n            owner: \"me\",\n            modified: (new Date()).toDateString()\n        };\n\n        courseService.createCourse(newCourse).then(theActualNewCourse =>\n            this.setState((prevState) => {\n                return {\n                    //new syntax: adding a new course onto an array of previous courses\n                    courses: [\n                        ...prevState.courses,\n                        theActualNewCourse]\n                }\n            }))\n    };\n\n    deleteCourse = (courseToDelete) => {\n        courseService.deleteCourse(courseToDelete._id)\n            .then(status => this.setState((prevState) => {\n                return ({\n                    courses: prevState.courses.filter(course => {\n                        return course !== courseToDelete\n                    })\n                })\n            }))\n    };\n\n\n    render() {\n        return (\n            <div>\n                <h2>Course List</h2>\n\n                <div className=\"input-group mb-3\">\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        onChange={(event) => this.setState({\n                            newCourseTitle: event.target.value\n                        })}\n                        value={this.state.newCourseTitle}\n                        placeholder=\"Course Title\"/>\n                    <div className=\"input-group-append\">\n                        <button\n                            className=\"btn btn-primary\"\n                            onClick={() => this.addCourse(\" \" + this.state.newCourseTitle)}>\n                            Add Course\n                        </button>\n                    </div>\n                </div>\n\n                {this.state.layout === \"table\" &&\n                <div>\n                    <button\n                        className=\"btn btn-light\"\n                        onClick={() => this.setLayout(\"grid\")}>\n                        Grid\n                    </button>\n                    <CourseTableComponent\n                        deleteCourse={this.deleteCourse}\n                        courses={this.state.courses}/>\n                </div>\n                }\n                {this.state.layout === \"grid\" &&\n                <div>\n                    <button\n                        className=\"btn btn-light\"\n                        onClick={() => this.setLayout(\"table\")}>\n                        Table\n                    </button>\n                    <CourseGridComponent courses={this.state.courses}/>\n                </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default CourseListContainer;\n","import React from \"react\";\n\nconst LessonTabsComponent = () => {\n    return(\n        <div>\n            <h4>Lesson Tabs</h4>\n        </div>\n    )\n};\n\nexport default LessonTabsComponent;","import React from \"react\";\n\nconst ModuleListComponent = () =>\n    <div>\n        <h4>Module List</h4>\n        <ul>\n            <li>Module A</li>\n            <li>Module B</li>\n            <li>Module C</li>\n            <li>Module D</li>\n        </ul>\n    </div>\n;\n\nexport default ModuleListComponent;","import React from \"react\";\nimport LessonTabsComponent from \"./LessonTabsComponent\";\nimport ModuleListComponent from \"./ModuleListComponent\";\nimport {Link} from \"react-router-dom\";\n\n//if i need to maintain a state, then i must be a class\n//if i do not need to maintain a state, then i can be a function\n\n//stateless component\nconst CourseEditor = () => {\n    return (\n        <div>\n            <Link to=\"/courses\">\n                Back\n            </Link>\n\n            <h2>Course Editor</h2>\n            <div className=\"row\">\n                <div className=\"col-4\">\n                    <ModuleListComponent/>\n                </div>\n\n                <div className=\"col-8\">\n                    <LessonTabsComponent/>\n                    <h4>Topic Pills</h4>\n                    <h4>Widget List</h4>\n                </div>\n            </div>\n\n        </div>\n    )\n};\n\n\nexport default CourseEditor;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst HomeComponent = () =>\n    <div>\n        <h1>Home</h1>\n\n        <div className=\"list-group\">\n\n            <Link className=\"list-group-item\"\n                  to=\"/editor\">\n                Course Editor\n            </Link>\n\n            <Link className=\"list-group-item\"\n                  to=\"/courses\">\n                Course List\n            </Link>\n\n            <Link className=\"list-group-item\"\n                  to=\"/sign-in\">\n                Sign-in\n            </Link>\n\n        </div>\n\n\n    </div>;\n\nexport default HomeComponent;\n\n","import React from \"react\";\n\nconst SignInComponent = () =>\n    <div>\n        <h2>Sign-in</h2>\n    </div>;\n\nexport default SignInComponent;","import React from \"react\";\nimport CourseListContainer from \"../containers/CourseListContainer\";\nimport CourseEditor from \"./CourseEditor\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport HomeComponent from \"./HomeComponent\";\nimport SignInComponent from \"./SignInComponent\";\n\n//\"extends React.Component\"- inheriting React's ES6\nclass Whiteboard extends React.Component {\n\n    //we are overriding the render function\n    render() {\n        //render can only return one root element\n        return (\n            <BrowserRouter>\n                <div>\n                    <h1>Whiteboard</h1>\n                    <Route path=\"/\"\n                           exact={true}\n                           component={HomeComponent}/>\n\n                    <Route path=\"/sign-in\" exact={true} component={SignInComponent}/>\n\n                    {/*TODO: port over sign-up, profile, etc.*/}\n\n                    <Route path=\"/courses\"\n                           exact={true}\n                           component={CourseListContainer}/>\n\n                    {/* :layout is a variable */}\n                    <Route path=\"/:layout/courses\"\n                           exact={true}\n                           component={CourseListContainer}/>\n\n\n                    <Route path=\"/editor\"\n                           exact={true}\n                           component={CourseEditor}/>\n\n                </div>\n            </BrowserRouter>\n        )\n    }\n}\n\n//we are importing from CourseListContainer,\n//by default we export to Whiteboard\nexport default Whiteboard;","import React from 'react';\n//import logo from './logo.svg';\n//import './App.css';\nimport Whiteboard from \"./components/Whiteboard\";\n\n//top level component\nfunction App() {\n  return (\n      <div className=\"container\">\n        {/*our root element, specific to our application*/}\n        <Whiteboard/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}